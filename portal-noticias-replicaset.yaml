# Serviço balanceado com Replicaset
apiVersion: apps/v1
kind: ReplicaSet
metadata: # é do próprio replicaset
  name: portal-noticias-replicaset
spec: #spec sem S - precisa do selector
  template:
    metadata: # é do pod dentro do replicaset
      name: portal-noticias 
      labels:
        app: portal-noticias # Tem que ser igual a o matchLabel do replicaset
    spec:
      containers:
        - name: portal-noticias-container
          image: aluracursos/portal-noticias:1
          ports:
            - containerPort: 80
          envFrom:
            - configMapRef:
                name: portal-configmap
  replicas: 3
  selector: # assim como um serviço, o kubernetes não sabe que o RS vai gerencias esse template, mesmo estando na mesma estrutura
    matchLabels:
      app: portal-noticias # Tem que ser igual a o label do template

# para aplicar
# kubectl apply -f [caminho]

# Nós temos, a grosso modo, um serviço balanceando, 
# o nosso acesso a três diferentes Pods, que são iguais. 
# Que, nesse caso, estamos utilizando a nossa aplicação localmente 
# com um nodeport para fazer esse acesso.

#Para testar
# kubectl delete pod [id-do-pod] 
# kubectl get rs 
# Observar após o delete, deve ser criado novamente por causa do replicaset ter 3 replicas
# kubectl get replicaset --watch
# cria um novo com um id diferente e nesse comando exibe qunaods estão prontos
# kubectl get pods


# apagar replicaset
# kubectl delete replicaset portal-noticias-replicaset